---

- name: Ensure libpam-pwquality is installed
  ansible.builtin.apt:
    name: libpam-pwquality
    state: present
    update_cache: yes
    cache_valid_time: 3600

- name: Configure pam_faillock.so pam entry 1 (common-auth)
  community.general.pamd:
    name: common-auth
    type: auth
    control: '[success=1 default=ignore]'
    module_path: pam_unix.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: 'preauth # Added to enable faillock'
    state: before

- name: Configure pam_faillock.so pam entry 2 (common-auth)
  community.general.pamd:
    name: common-auth
    type: auth
    control: '[success=1 default=ignore]'
    module_path: pam_unix.so
    new_type: auth
    new_control: '[default=die]'
    new_module_path: pam_faillock.so
    module_arguments: 'authfail # Added to enable faillock'
    state: after

- name: Configure pam_faillock.so pam entry 3 (common-auth)
  community.general.pamd:
    name: common-auth
    type: auth
    control: '[default=die]'
    module_path: pam_faillock.so
    new_type: auth
    new_control: sufficient
    new_module_path: pam_faillock.so
    module_arguments: 'authsucc # Added to enable faillock'
    state: after


- name: Configure pam_faillock.so pam entry (common-account)
  community.general.pamd:
    name: common-account
    type: account
    control: 'required'
    module_path: pam_permit.so
    new_type: account
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: '# Added to enable faillock'
    state: after

- name: Configure pam_pwquality.so pam entry (common-password)
  community.general.pamd:
    name: common-password
    type: password
    control: '[success=1 default=ignore]'
    module_path: pam_unix.so
    new_type: password
    new_control: requisite
    new_module_path: pam_pwquality.so
    module_arguments: 'retry={{ auth_retry | default(3,true) | int(3) }}'
    state: before


- name: Configure pam_pwhistory.so pam entry (common-password)
  community.general.pamd:
    name: common-password
    type: password
    control: 'requisite'
    module_path: pam_pwquality.so
    new_type: password
    new_control: required
    new_module_path: pam_pwhistory.so
    module_arguments: 'remember={{ auth_remember | default(5,true) | int(5) }}'
    state: before

- name: Configure pam_umask.so pam entry (common-session)
  community.general.pamd:
    name: common-session
    type: session
    control: '[default=1]'
    module_path: pam_permit.so
    new_type: session
    new_control: optional
    new_module_path: pam_umask.so
    module_arguments: '# set umask according to login.defs'
    state: before


- name: Remove encryption method from pam_unix.so on common-password
  community.general.pamd:
    name: common-password
    type: "{{ item.type }}"
    control: "{{ item.control }}"
    module_path: "{{ item.module }}"
    module_arguments: "{{ item.arg }}"
    state: args_absent
  loop:
    - { type: password, control: '[success=1 default=ignore]', module: pam_unix.so,
        arg: "yescrypt" }
    - { type: password, control: '[success=1 default=ignore]', module: pam_unix.so,
        arg: "md5" }
    - { type: password, control: '[success=1 default=ignore]', module: pam_unix.so,
        arg: "bigcrypt" }
    - { type: password, control: '[success=1 default=ignore]', module: pam_unix.so,
        arg: "sha256" }
    - { type: password, control: '[success=1 default=ignore]', module: pam_unix.so,
        arg: "sha512" }
    - { type: password, control: '[success=1 default=ignore]', module: pam_unix.so,
        arg: "blowfish" }


# Not using pamd module because the file already has a line
# that just need to be uncommented
- name: Ensure access to the su command is restricted
  block:
    - name: "Ensure group {{ auth_su_group }} exists"
      ansible.builtin.group:
        name: "{{ auth_su_group }}"
        state: present

    - name: Ensure pam.d/su file has pam_wheel enabled to enforce
      ansible.builtin.lineinfile:
        path: /etc/pam.d/su
        regexp: '^\s*#\s*auth\s+required\s+pam_wheel.so\s*(use_uid)?\s*(group=.+?)\s*$'
        line: 'auth           required        pam_wheel.so use_uid group={{ auth_su_group }}'
        state: present
        insertafter: '^\s*#\s*auth\s+required\s+pam_wheel.so'

    - name: "Add root to {{ auth_su_group }} group"
      ansible.builtin.user:
        name: root
        groups: "{{ auth_su_group }}"
        append: yes
  tags:
    - su_restrict
